// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid            String         @id @default(uuid())
  email           String         @unique
  firstName       String?
  lastName        String?
  number          String
  password        String
  orders          Order[]
  emailVerifiedAt DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tokens_table    tokens_table[]
  role_user       role_user[]
  role            Role           @default(USER)
  latestIp        String?
  verfied         Boolean        @default(false)
}

enum Role {
  ADMIN
  USER
}

model roles {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role_user       role_user[]
  permission_role permission_role[]
}

model role_user {
  role      roles    @relation(fields: [roleId], references: [id])
  roleId    Int
  user      User     @relation(fields: [userId], references: [uuid])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([roleId, userId])
}

model permissions {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  permission_role permission_role[]
}

model permission_role {
  permission   permissions @relation(fields: [permissionId], references: [id])
  permissionId Int
  role         roles       @relation(fields: [roleId], references: [id])
  roleId       Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@id([permissionId, roleId])
}

model tokens_table {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [uuid])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model Order {
  id            String          @id @default(uuid())
  user          User            @relation(fields: [userId], references: [uuid])
  userId        String
  status        Status          @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  order_product order_product[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  price          Float
  description    String
  visible        Boolean          @default(true)
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  order_product  order_product[]
  Product_Option Product_Option[]
  Option         Option[]
}

model Option {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  price          Float            @default(0)
  product        Product          @relation(fields: [productId], references: [id])
  productId      Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Product_Option Product_Option[]
}

model Product_Option {
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  option    Option   @relation(fields: [optionId], references: [id])
  optionId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDefault Boolean  @default(false)

  @@id([productId, optionId])
}

model order_product {
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  quantity     Int
  currentPrice Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([orderId, productId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  visible     Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

model settings {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
